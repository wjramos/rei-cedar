@function add-empty-bp-maps($bps) {
  $returnMap: ();
  @each $key, $value in $bps {
    $returnMap: map-set($returnMap, #{$key}, ());
  }
  @return $returnMap;
}

@function build-style-map($key, $val, $baseMap, $bp) {
  $el: get-el($key);
  $prop: get-prop($key, $val);

  // set up bp map if there isn't one
  @if not(map-has-key($baseMap, #{$bp})) {
    @warn '#{$bp} is not defined';
    $baseMap: map-set($baseMap, #{$bp}, ());
  }

  // is element specific
  @if ($el) {
    // set up element map if there isn't one
    @if not(map-has-nested-keys($baseMap, #{$bp}, #{$el})) {
      $newElMap: map-deep-set($baseMap, #{$bp}, (#{$el}:()));
      $baseMap: map-deep-merge($baseMap, $newElMap);
    }
    $newMap: map-deep-set($baseMap, #{$bp}, #{$el}, #{$prop}, #{$val});
    $returnMap: map-deep-merge($baseMap, $newMap);
    @return $returnMap;
  }
  // only breakpoint specific
  @else {
    // just use key if not a valid prop
    @if not($prop) { $prop: $key; }
    $returnMap: map-deep-set($baseMap, #{$bp}, #{$prop}, #{$val});
    @return $returnMap;
  }
}

// TODO: extend this into it's own map/functions for checking
@function get-el($key) {
  @if(str-index($key, 'h-1')) {
    @return 'h1';
  }
  @if(str-index($key, 'h-2')) {
    @return 'h2';
  }
  @if(str-index($key, 'h-3')) {
    @return 'h3';
  }
  @if(str-index($key, 'h-4')) {
    @return 'h4';
  }
  @if(str-index($key, 'h-5')) {
    @return 'h5';
  }
  @if(str-index($key, 'h-6')) {
    @return 'h6';
  }
  @return null;
}

// TODO: extend this into own map/functions
@function get-prop($key, $val) {
  @if(str-index($key, font-size)) {
    @return 'font-size';
  }
  @else if(str-index($key, font-weight)) {
    @return 'font-weight';
  }
  @else if(str-index($key, font-family)) {
    @return 'font-family';
  }
  @else if(str-index($key, line-height)) {
    @return 'line-height';
  }
  @else if(str-index($key, margin-top)) {
    @return 'margin-top';
  }
  @else if(str-index($key, margin-bottom)) {
    @return 'margin-bottom';
  }
  @else {
    @warn 'property \'#{$key}\' does not exist in property definitions';
    @return null;
  }
}
