// Adapted from sass-mq (https://github.com/mcaskill/sass-mq)
// $global-font-size: 100% !default;

/// Base font size on the `<body>` element
/// @type Number (unit)
$mq-base-font-size: $global-font-size;
// Convert to px if a %
@if unit($mq-base-font-size) == '%' {
    $mq-base-font-size: ($mq-base-font-size / 100%) * 16px;
}

/// Responsive mode
///
/// Set to `false` to enable support for browsers that do not support @media queries,
/// (IE <= 8, Firefox <= 3, Opera <= 9)
///
/// You could create a stylesheet served exclusively to older browsers,
/// where @media queries are rasterized
///
/// @example scss
///  // old-ie.scss
///  $mq-responsive: false;
///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint
///                   // larger breakpoints will be ignored
///
/// @type Boolean
/// @link https://github.com/mcaskill/sass-mq#responsive-mode-off Disabled responsive mode documentation
$mq-responsive: true !default;

/// Breakpoint list
///
/// Name your breakpoints in a way that creates a ubiquitous language
/// across team members. It will improve communication between
/// stakeholders, designers, developers, and testers.
///
/// @type Map
/// @link https://github.com/mcaskill/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples
$mq-breakpoints: (
  small: 0px,
  medium: 640px,
  large: 1024px,
  xlarge: 1200px,
  xxlarge: 1440px,
) !default;

$zero-breakpoint: small !default;

$breakpoints-keys: map-to-list($mq-breakpoints, 'keys');

@if nth(map-values($mq-breakpoints), 1) != 0 {
  @error 'Your smallest breakpoint (defined in $mq-breakpoints) must be set to "0".';
}
@else {
  $zero-breakpoint: nth(map-keys($mq-breakpoints), 1);
}

/// Static breakpoint (for fixed-sized layouts)
///
/// Define the breakpoint from $mq-breakpoints that should
/// be used as the target length for the fixed-sized layout
/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss
///
/// @example scss
///  // tablet-only.scss
///  //
///  // Ignore all styles above tablet breakpoint,
///  // and fix the styles (e.g. layout) at tablet width
///  $mq-responsive: false;
///  $mq-static-breakpoint: tablet;
///  @import 'main'; // @media queries in this file will be rasterized up to tablet
///                   // larger breakpoints will be ignored
///
/// @type String
/// @link https://github.com/mcaskill/sass-mq#adding-custom-breakpoints Full documentation and examples
$mq-static-breakpoint: desktop !default;

/// Show breakpoints in the top right corner
///
/// If you want to display the currently active breakpoint in the top
/// right corner of your site during development, add the breakpoints
/// to this list, ordered by length, e.g. (mobile, tablet, desktop).
///
/// @type map
$mq-show-breakpoints: () !default;

/// Customize the media type (e.g. `@media screen` or `@media print`)
/// By default sass-mq uses an "all" media type (`@media all and …`)
///
/// @type String
/// @link https://github.com/mcaskill/sass-mq#changing-media-type Full documentation and examples
$mq-media-type: all !default;

/// Convert pixels to ems
///
/// @param {Number} $px - value to convert
/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size
///
/// @example scss
///  $font-size-in-ems: mq-px2em(16px);
///  p { font-size: mq-px2em(16px); }
///
/// @requires $mq-base-font-size
/// @returns {Number}
@function mq-px2em($px, $base-font-size: $mq-base-font-size) {
    @if unitless($px) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return mq-px2em($px * 1px, $base-font-size);
    } @else if unit($px) == em {
        @return $px;
    }
    @return ($px / $base-font-size) * 1em;
}

/// Get a breakpoint's length
///
/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints
///
/// @example scss
///  $tablet-width: mq-get-breakpoint-length(tablet);
///  @media (min-width: mq-get-breakpoint-length(desktop)) {}
///
/// @requires {Variable} $mq-breakpoints
///
/// @returns {Number} Value in pixels
@function mq-get-breakpoint-length($name, $breakpoints: $mq-breakpoints) {
    @if map-has-key($breakpoints, $name) {
        @return map-get($breakpoints, $name);
    } @else {
        @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    }
}

/// Parse a breakpoint
///
/// @param {String | Number} $value - Length of the breakpoint. One of $breakpoints
/// @param {Boolean} $exclusive (false) - Should the value be an exclusive boundary
/// @param {Map} $breakpoints ($mq-breakpoints) - Map of breakpoints
///
/// @example scss
///  @media (min-width: mq-parse-breakpoint(380px)) {}
///  @media (min-width: mq-parse-breakpoint(desktop)) {}
///
/// @requires {Variable} $mq-breakpoints
/// @requires {function} mq-px2em
/// @requires {function} mq-get-breakpoint-length
///
/// @returns {Number} Value in pixels
@function mq-parse-breakpoint($value, $exclusive: false, $breakpoints: $mq-breakpoints) {
    @if type-of($value) == number {
        @return mq-px2em($value);
    } @else {
        @return mq-px2em(mq-get-breakpoint-length($value, $breakpoints)) - if($exclusive, .01em, 0);
    }
}

/// Joins all elements of `$list` with `$glue`.
///
/// @ignore Documentation: http://sassylists.com/documentation.html#sl-to-string
///
/// @param {List} $list - list to cast
/// @param {String} $glue (' and ') - value to use as a join string
///
/// @example scss
///  mq-stringify(a b c)
///  // a and b and c
///
/// @example scss
///  mq-stringify(a b c, ', ')
///  // a, b, c
///
/// @return {String}
@function mq-stringify( $list, $glue: ' and ' ) {
    $result: '';

    @each $item in $list {
        $result: $result + if(length($item) > 1, mq-stringify($item, $glue), $item);

        @if $item != nth($list, -1) {
            $result: $result + $glue;
        }
    }

    @return quote($result);
}

/// Media Query Function
///
/// Computes a media query based on a list of conditions.
///
/// @param {String | Boolean} $from (false) - One of $mq-breakpoints
/// @param {String | Boolean} $until (false) - One of $mq-breakpoints
/// @param {String | Boolean} $and (false) - Additional media query parameters
/// @param {String | Boolean} $or (false) - Alternative media query parameters
/// @param {String} $media-feature (width) - Media feature: width or height of the output device's rendering surface
/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…
///
/// @ignore Undocumented API, for advanced use only:
/// @ignore @param {Map} $breakpoints ($mq-breakpoints)
/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)
///
/// @requires {Variable} $mq-media-type
/// @requires {Variable} $mq-breakpoints
/// @requires {Variable} $mq-static-breakpoint
/// @requires {function} mq-stringify
/// @requires {function} mq-parse-breakpoint
///
/// @example scss
///  $mq-lap-and-up: mq($from: mobile);
///
///  $mq-palm: mq($until: tablet);
///
///  $mq-lap: mq(mobile, tablet);
///
///  $mq-portable: mq($from: tablet, $and: '(orientation: landscape)');
///
///  $mq-desk-small: mq(950px) {
///
///  $mq-portable-screen: mq(tablet, $media-type: screen) {
///
///  // Advanced use:
///  $my-breakpoints: ( L: 900px, XL: 1200px );
///  $mq-custom: mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L);
@function mq(
    $from: false,
    $until: false,
    $and: false,
    $or: false,
    $media-feature: width,
    $media-type: $mq-media-type,
    $breakpoints: $mq-breakpoints,
    $static-breakpoint: $mq-static-breakpoint
) {
    $min-value: 0;
    $max-value: 0;
    $media-query: ();

    // From: this breakpoint (inclusive)
    @if $from {
       $min-value: mq-parse-breakpoint($from, false, $breakpoints);
    }

    // Until: that breakpoint (exclusive)
    @if $until {
        $max-value: mq-parse-breakpoint($until, true, $breakpoints);
    }

    @if $media-feature {
        @if $min-value != 0 { $media-query: append($media-query, '(min-#{$media-feature}: #{$min-value})'); }
        @if $max-value != 0 { $media-query: append($media-query, '(max-#{$media-feature}: #{$max-value})'); }
    }

    @if $and {
        $media-query: append($media-query, '#{$and}');
    }

    $media-query: mq-stringify($media-query, ' and ');

    // Prevent unnecessary media query prefix 'all and '
    @if ($media-type != 'all' and $media-query != '') {
        $media-query: '#{$media-type} and #{$media-query}';
    }
    @else if $media-query == '' {
        $media-query: $media-type;
    }

    @if $or {
        $media-query: append($media-query, '#{$or}');
        $media-query: mq-stringify($media-query, ', ');
    }

    $media-query: unquote(#{$media-query});

    @return $media-query;
}

/// Media Query Mixin
///
/// Generates a media query bock, based on a list of conditions, around a set
/// of nested CSS statements.
///
/// @param {String | Boolean} $from (false) - One of $mq-breakpoints
/// @param {String | Boolean} $until (false) - One of $mq-breakpoints
/// @param {String | Boolean} $and (false) - Additional media query parameters
/// @param {String | Boolean} $or (false) - Alternative media query parameters
/// @param {String} $media-feature (width) - Media feature: width or height of the output device's rendering surface
/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…
///
/// @ignore Undocumented API, for advanced use only:
/// @ignore @param {Map} $breakpoints ($mq-breakpoints)
/// @ignore @param {Boolean} $responsive ($mq-responsive)
/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)
///
/// @content styling rules, wrapped into a @media query when $responsive is true
///
/// @requires {Variable} $mq-media-type
/// @requires {Variable} $mq-breakpoints
/// @requires {Variable} $mq-static-breakpoint
/// @requires {function} mq
/// @requires {function} mq-parse-breakpoint
/// @requires {function} mq-get-breakpoint-length
///
/// @link https://github.com/mcaskill/sass-mq#responsive-mode-on-default Full documentation and examples
///
/// @example scss
///  .element {
///    @include mq($from: mobile) {
///      color: red;
///    }
///    @include mq($until: tablet) {
///      color: blue;
///    }
///    @include mq(mobile, tablet) {
///      color: green;
///    }
///    @include mq($from: tablet, $and: '(orientation: landscape)') {
///      color: teal;
///    }
///    @include mq(950px) {
///      color: hotpink;
///    }
///    @include mq(tablet, $media-type: screen) {
///      color: hotpink;
///    }
///    // Advanced use:
///    $my-breakpoints: (L: 900px, XL: 1200px);
///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {
///      color: hotpink;
///    }
///  }
@mixin mq(
    $from: false,
    $until: false,
    $and: false,
    $or: false,
    $media-feature: width,
    $media-type: $mq-media-type,
    $breakpoints: $mq-breakpoints,
    $responsive: $mq-responsive,
    $static-breakpoint: $mq-static-breakpoint
) {
    // Responsive support is disabled, rasterize the output outside @media blocks
    // The browser will rely on the cascade itself.
    @if ($responsive == false) {
        $min-value: 0;
        $max-value: 0;

        // From: this breakpoint (inclusive)
        @if $from {
            $min-value: mq-parse-breakpoint($from, false, $breakpoints);
        }

        // Until: that breakpoint (exclusive)
        @if $until {
            $max-value: mq-parse-breakpoint($until, true, $breakpoints);
        }

        $static-breakpoint-value: mq-get-breakpoint-length($static-breakpoint, $breakpoints);
        $target-value: mq-px2em($static-breakpoint-value);

        // Output only rules that start at or span our target value
        @if (
            $and == false
            and $min-value <= $target-value
            and (
                $until == false or $max-value >= $target-value
            )
        ) {
            @content;
        }
    }

    // Responsive support is enabled, output rules inside @media queries
    @else {
        $media-query: mq($from, $until, $and, $or, $media-feature, $media-type, $breakpoints, $static-breakpoint);

        @media #{$media-query} {
            @content;
        }
    }
}


/// Add a breakpoint
///
/// @param {String} $name - Name of the breakpoint
/// @param {Number} $length - Length of the breakpoint
///
/// @requires {Variable} $mq-breakpoints
///
/// @example scss
///  @include mq-add-breakpoint(tvscreen, 1920px);
///  @include mq(tvscreen) {}
@mixin mq-add-breakpoint($name, $length) {
    $new-breakpoint: ($name: $length);
    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;
}

/// Show the active breakpoint in the top right corner of the viewport
/// @link https://github.com/mcaskill/sass-mq#seeing-the-currently-active-breakpoint
///
/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner
/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes
///
/// @requires {Variable} $mq-breakpoints
/// @requires {Variable} $mq-show-breakpoints
///
/// @example scss
///  // Show breakpoints using global settings
///  @include mq-show-breakpoints;
///
///  // Show breakpoints using custom settings
///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));
@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {
    body:before {
        background-color: #FCF8E3;
        border-bottom: 1px solid #FBEED5;
        border-left: 1px solid #FBEED5;
        color: #C09853;
        font: small-caption;
        padding: 3px 6px;
        pointer-events: none;
        position: fixed;
        right: 0;
        top: 0;
        z-index: 100;

        // Loop through the breakpoints that should be shown
        @each $show-breakpoint in $show-breakpoints {
            $length: mq-get-breakpoint-length($show-breakpoint, $breakpoints);
            @include mq($show-breakpoint, $breakpoints: $breakpoints) {
                content: "#{$show-breakpoint} ≥ #{$length} (#{mq-px2em($length)})";
            }
        }
    }
}

@if length($mq-show-breakpoints) > 0 {
    @include mq-show-breakpoints;
}
