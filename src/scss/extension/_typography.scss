@import "design/sentinel/sentinel-font.map.scss";

$fonts-map: (
"sentinel": $sentinel-font-map
);

@mixin cedar-headings {
  @each $font-name, $map in $fonts-map {
    // unique placeholder in case of no defined class
    // TODO: better idea? maybe use font-name?
    $fullClass: class-#{unique-id()};
    // TODO/QUESTION: do we want other reserved keys like class?
    // if class defined -> set variable and remove it so it's only css properties left
    @if (map-has-key($map, 'class')) {
      $className: map-get($map, class);
      $fullClass: #{$prefix}#{$className};
      $map: map-remove($map, class);
    }

    // prepopulate map with breakpoint values
    $font-style-map: ();
    @each $key, $value in $mq-breakpoints {
      $font-style-map: map-set($font-style-map, #{$key}, ());
    }

    // build out map with all styles organized by breakpoints and element specifics
    @each $key, $val in $map {
      $split: _split($key, $varDelimiter);
      $el: false;
      $prop: false;
      $breakpoint: false;
      @each $item in $split {
        $allGood: false; // hack because sass can't break loops
        // remove leading - to normalize for _starts-with
        $item: _trim-left($item, '-');

        @if (_starts-with($item, $elementId)) {
          $el: get-el($item);
          $allGood: true;
        } @else if (_starts-with($item, $propertyId)) {
          $prop: get-prop($item);
          $allGood: true;
        } @else if (_starts-with($item, $breakpointId)) {
          $breakpoint: get-bp($item, $font-style-map);
          $allGood: true;
        } @else if not($allGood) {
          @warn '\'#{$key}\' is missing identifiers or the variables for them are wrong';
        }
      }

      // if no breakpoint set, assume it's small/general (mobile-first)
      @if not($breakpoint) {
        $font-style-map: generate-style-map($key, $val, $font-style-map, $zero-breakpoint, $el, $prop);
      }@else {
        $font-style-map: generate-style-map($key, $val, $font-style-map, $breakpoint, $el, $prop);
      }
    }

    // Heading styles
    @each $size, $defs in $font-style-map {
      //only make a media query for things above small (mobile-first)
      @if $size != $zero-breakpoint {
        @include mq($size) {
          .#{$fullClass} {
            @include build-mapped-styles($defs);
          }
        }
      } @else {
        .#{$fullClass} {
          @include build-mapped-styles($defs);
        }
      }
    }

  }
}

// Mixin for generating styles from header map definitions
@mixin build-mapped-styles($defs) {
  @each $key, $val in $defs {
    // if a map, chain a class and get the values
    @if type-of($val) == map {
      &.#{$prefix}#{$key} {
        @include build-mapped-styles($val);
      }
    }
    @else {
      /// QUESTION/NOTE/TODO: need to enforce/limit to known good values?
      /// in order to set things like units (px vs rem vs unitless)
      /// this would add a lot more complexity
      // @if ($key == font-size) {
      //   font-size: rem-calc(to-number($val));
      // }
      // @else if ($key == font-weight) {
      //   font-weight: $val;
      // }
      /// QUESTION/NOTE: OR trust what is given?
      #{$key}: #{$val};
    }
  }
}

// build everything here
@include cedar-headings();
