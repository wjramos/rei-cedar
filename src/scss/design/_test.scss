@import "tokens/sentinel/sentinel-font.map.scss";

$fonts-map: (
  "sentinel": $sentinel-font-map
);

@mixin cedar-headings {
  @each $font-name, $map in $fonts-map {
    $className: map-get($map, class);
    $fullClass: #{$prefix}#{$className};

    // TODO: hook this in with breakpoints variables
    $font-style-map: ();
    // TODO: this too ^^
    @each $key, $val in $map {
      @if (str-index($key, '-sm')) {
        $font-style-map: make-bp-map($key, $val, $font-style-map, small);
      }
      @else if (str-index($key, '-md')) {
        $font-style-map: make-bp-map($key, $val, $font-style-map, medium);
      }
      @else {
        $font-style-map: make-bp-map($key, $val, $font-style-map, small);
      }
    }

    // Heading styles
    @each $size, $defs in $font-style-map {
      //only make a media query for things above small (mobile-first)
      @if $size != $zero-breakpoint {
        @include mq($size) {
          .#{$fullClass} {
            @include build-mapped-styles($defs);
          }
        }
      } @else {
        .#{$fullClass} {
          @include build-mapped-styles($defs);
        }
      }
    }
  }
}

@function make-bp-map($key, $val, $baseMap, $bp) {
  $el: get-el($key);
  $prop: get-prop($key, $val);

  // set up bp map if there isn't one
  @if not(map-has-key($baseMap, #{$bp})) {
    $baseMap: map-set($baseMap, #{$bp}, ());
  }

  // is element specific
  @if ($el) {
    // set up element map if there isn't one
    @if not(map-has-nested-keys($baseMap, #{$bp}, #{$el})) {
      $newElMap: map-deep-set($baseMap, #{$bp}, (#{$el}:()));
      $baseMap: map-deep-merge($baseMap, $newElMap);
    }
    $newMap: map-deep-set($baseMap, #{$bp}, #{$el}, #{$prop}, #{$val});
    $returnMap: map-deep-merge($baseMap, $newMap);
    @return $returnMap;
  }
  // only breakpoint specific
  @else {
    // just use key if not a valid prop
    @if not($prop) { $prop: $key; }
    $returnMap: map-deep-set($baseMap, #{$bp}, #{$prop}, #{$val});
    @return $returnMap;
  }
}

// Mixin for generating styles from header map definitions
// TODO: fix recursively building class stuff
// TODO: better way to look for/output properties
@mixin build-mapped-styles($defs) {
    @each $key, $val in $defs {
      @if type-of($val) == map {
        &.#{$key} {
          @include build-mapped-styles($val);
        }
      }
      @else {
        @if ($key == font-size) {
          font-size: rem-calc(to-number($val));
        }
        @else if ($key == font-weight) {
          font-weight: $val;
        }
        @else if ($key == font-family) {
          font-family: $val;
        }
        @else if ($key == line-height) {
          line-height: unitless-calc(to-number($val));
        }
        @else if ($key == margin-top) {
          margin-top: rem-calc(to-number($val));
        }
        @else if ($key == margin-bottom) {
          margin-bottom: rem-calc(to-number($val));
        }
      }
  }
}

// build everything here
@include cedar-headings();
