@import "tokens/sentinel/sentinel-font.map.scss";

$fonts-map: (
  "sentinel": $sentinel-font-map
);

@mixin cedar-headings {
  @each $font-name, $map in $fonts-map {
    $className: map-get($map, class);
    // $fontStyle: map-get($map, font-style);
    // $fontVariant: map-get($map, font-variant);
    // $fontWeight: map-get($map, font-weight);
    // $lineHeight: map-get($map, line-height);
    // $fontFamily: map-get($map, font-family);
    //
    // //Base class for font
    // .#{$prefix}header-#{$className} {
    //   font-style: #{$fontStyle};
    //   font-variant: #{$fontVariant};
    //   font-weight: #{$fontWeight};
    //   line-height: #{$lineHeight};
    //   font-family: #{$fontFamily};
    // }

    // TODO: hook this in with breakpoints variables
    $font-style-map: ();

    @each $key, $val in $map {
      @if (str-index($key, '-sm')) {
        $font-style-map: make-bp-map($key, $val, $font-style-map, small);
      }
      @else if (str-index($key, '-md')) {
        $font-style-map: make-bp-map($key, $val, $font-style-map, medium);
      }
      @else {
        $font-style-map: make-bp-map($key, $val, $font-style-map, small);
      }
    }

    @include debug-map($font-style-map);

    // Heading styles
    @each $size, $defs in $font-style-map {
      //only make a media query for things above small (mobile-first)
      @if $size != $zero-breakpoint {
        @include mq($size) {
          @include build-mapped-styles($defs, $className);
        }
      } @else {
        @include build-mapped-styles($defs, $className);
      }
    }
  }
}

@function make-bp-map($key, $val, $baseMap, $bp) {
  $el: get-el($key);
  $attr: get-attr($key, $val);

  // set up bp map if there isn't one
  @if not(map-has-key($baseMap, #{$bp})) {
    $baseMap: map-set($baseMap, #{$bp}, ());
  }

  // is element specific
  @if ($el) {
    // set up element map if there isn't one
    @if not(map-has-nested-keys($baseMap, #{$bp}, #{$el})) {
      $newElMap: map-deep-set($baseMap, #{$bp}, (#{$el}:()));
      $baseMap: map-deep-merge($baseMap, $newElMap);
    }
    $newMap: map-deep-set($baseMap, #{$bp}, #{$el}, #{$attr}, #{$val});
    $returnMap: map-deep-merge($baseMap, $newMap);
    @return $returnMap;
  }
  // only breakpoint specific
  @else {
    //TODO: what to do about null attr?
    $returnMap: map-deep-set($baseMap, #{$bp}, #{$attr}, #{$val});
    @return $returnMap;
  }
}

// Mixin for generating styles from header map definitions
// TODO: extend this to build base styles too -- recursion?
@mixin build-mapped-styles($headers, $class) {
  @each $header, $header-defs in $headers {
    #{$header}.#{$prefix}header-#{$class} {
      @each $attr, $val in $header-defs {
        @if ($attr == font-size) {
          font-size: rem-calc(to-number($val));
        }
        @if ($attr == font-weight) {
          font-weight: $val;
        }
        @if ($attr == line-height) {
          line-height: unitless-calc($val);
        }
        @if ($attr == margin-top) {
          margin-top: rem-calc(to-number($val));
        }
        @if ($attr == margin-bottom) {
          margin-bottom: rem-calc(to-number($val));
        }
      }
    }
  }
}

// TODO: extend this into it's own map/functions for checking
@function get-el($key) {
  @if(str-index($key, 'h-1')) {
    @return 'h1';
  }
  @if(str-index($key, 'h-2')) {
    @return 'h2';
  }
  @if(str-index($key, 'h-3')) {
    @return 'h3';
  }
  @if(str-index($key, 'h-4')) {
    @return 'h4';
  }
  @if(str-index($key, 'h-5')) {
    @return 'h5';
  }
  @if(str-index($key, 'h-6')) {
    @return 'h6';
  }
  @return null;
}

// TODO: extend this into own map/functions
@function get-attr($key, $val) {
  @if(str-index($key, font-size)) {
    @return 'font-size';
  }
  @else if(str-index($key, font-weight)) {
    @return 'font-weight';
  }
  @else if(str-index($key, font-family)) {
    @return 'font-family';
  }
  @else if(str-index($key, line-height)) {
    @return 'line-height';
  }
  @else if(str-index($key, margin-top)) {
    @return 'margin-top';
  }
  @else if(str-index($key, margin-bottom)) {
    @return 'margin-bottom';
  }
  @else {
    @warn 'attr \'#{$key}\' does not exist in definitions';
    @return null;
  }
}

// build everything here
@include cedar-headings();
