@import "tokens/sentinel/sentinel-font.map.scss";

$fonts-map: (
  "sentinel": $sentinel-font-map
);

@mixin cedar-headings {
  @each $font-name, $map in $fonts-map {
    // unique placeholder in case of no defined class
    // TODO: better idea?
    $fullClass: class-#{unique-id()};
    // if class defined -> set variable and remove it so it's only css properties left
    @if (map-has-key($map, 'class')) {
      $className: map-get($map, class);
      $fullClass: #{$prefix}#{$className};
      $map: map-remove($map, class);
    }

    // prepopulate map with breakpoint values
    $font-style-map: ();
    @each $key, $value in $mq-breakpoints {
      $font-style-map: map-set($font-style-map, #{$key}, ());
    }

    // build out map with all styles organized by breakpoints and element specifics
    @each $key, $val in $map {
      $found: false; // hack because sass doesn't have break
      // look for definitions that match defined breakpoints
      @each $bpname, $bpval in $font-style-map {
        @if (str-index($key, '-#{$bpname}')) {
          $found: true;
          $font-style-map: generate-style-map($key, $val, $font-style-map, #{$bpname});
        }
      }
      // if no match (or no bp defined), assume it's for small bp/general (mobile-first)
      @if not($found) {
        $font-style-map: generate-style-map($key, $val, $font-style-map, $zero-breakpoint);
      }
    }

    // Heading styles
    @each $size, $defs in $font-style-map {
      //only make a media query for things above small (mobile-first)
      @if $size != $zero-breakpoint {
        @include mq($size) {
          .#{$fullClass} {
            @include build-mapped-styles($defs);
          }
        }
      } @else {
        .#{$fullClass} {
          @include build-mapped-styles($defs);
        }
      }
    }

  }
}

// Mixin for generating styles from header map definitions
@mixin build-mapped-styles($defs) {
    @each $key, $val in $defs {
      @if type-of($val) == map {
        &.#{$key} {
          @include build-mapped-styles($val);
        }
      }
      @else {
        /// QUESTION/NOTE/TODO: need to enforce/limit to known good values?
        /// in order to set things like units (px vs rem vs unitless)
        // @if ($key == font-size) {
        //   font-size: rem-calc(to-number($val));
        // }
        // @else if ($key == font-weight) {
        //   font-weight: $val;
        // }
        /// QUESTION/NOTE: OR trust what is given?
        #{$key}: #{$val};
      }
  }
}

// build everything here
@include cedar-headings();
