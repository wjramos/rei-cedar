@import "tokens/sentinel/sentinel-font.map.scss";

$fonts-map: (
"sentinel": $sentinel-font-map
);

// Mixin for generating styles from header map definitions
@mixin build-mapped-styles($headers, $class) {
  @each $header, $header-defs in $headers {
    #{$header}.#{$prefix}header-#{$class} {
      @each $attr, $val in $header-defs {
        @if ($attr == font-size) {
          font-size: rem-calc($val);
        }
        @if ($attr == font-weight) {
          font-weight: $val;
        }
        @if ($attr == line-height) {
          line-height: $val;
        }
        @if ($attr == margin-top) {
          margin-top: rem-calc($val);
        }
        @if ($attr == margin-bottom) {
          margin-bottom: rem-calc($val);
        }
      }
    }
  }
}

@function get-el($key) {
  @if(str-index($key, 'h-1')) {
    @return 'h1';
  }
  @if(str-index($key, 'h-2')) {
    @return 'h2';
  }
  @if(str-index($key, 'h-3')) {
    @return 'h3';
  }
  @if(str-index($key, 'h-4')) {
    @return 'h4';
  }
  @if(str-index($key, 'h-5')) {
    @return 'h5';
  }
  @if(str-index($key, 'h-6')) {
    @return 'h6';
  }
}

@function get-attr($key, $val) {
  @if(str-index($key, font-size)) {
    @return 'font-size';
  }
  @if(str-index($key, font-weight)) {
    @return 'font-weight';
  }
  @if(str-index($key, line-height)) {
    @return 'line-height';
  }
  @if(str-index($key, margin-top)) {
    @return 'margin-top';
  }
  @if(str-index($key, margin-bottom)) {
    @return 'margin-bottom';
  }
}

@function make-bp-map($key, $val, $baseMap, $bp) {
  $el: get-el($key);
  $attr: get-attr($key, $val);

  // check if breakpoint map exists
  @if (map-has-key($baseMap, #{$bp})) {
    $bpMap: map-deep-get($baseMap, #{$bp});
    // check if element map exists
    @if (map-has-key($bpMap, #{$el})) {
      // add to existing element map
      $elMap: map-deep-get($baseMap, #{$bp}, #{$el});
      $elMap: map-merge($elMap, ($attr:$val));
      $returnMap: map-deep-set($baseMap, #{$bp}, #{$el}, $elMap);
      @return $returnMap;
    }
    // create element map if !exists
    $bpMap: map-merge($bpMap, (#{$el}: ()));
    $baseMap: map-deep-set($baseMap, #{$bp}, $bpMap);
    $returnMap: map-deep-set($baseMap, #{$bp}, #{$el}, $attr, $val);
    @return $returnMap;
  }
  // create breakpoint map and element map if !exists
  $baseMap: map-merge($baseMap, (#{$bp}:(#{$el}:())));
  $returnMap: map-deep-set($baseMap, #{$bp}, #{$el}, $attr, $val);

  @return $returnMap;
}

@each $font-name, $map in $fonts-map {
  $className: map-get($map, class);
  $fontStyle: map-get($map, font-style);
  $fontVariant: map-get($map, font-variant);
  $fontWeight: map-get($map, font-weight);
  $lineHeight: map-get($map, line-height);
  $fontFamily: map-get($map, font-family);

  //Base class for font
  .#{$prefix}header-#{$className} {
    font-style: #{$fontStyle};
    font-variant: #{$fontVariant};
    font-weight: #{$fontWeight};
    line-height: #{$lineHeight};
    font-family: #{$fontFamily};
  }

  $font-style-map: ();

  @each $key, $val in $map {
    @if (str-index($key, '-sm')) {
      $font-style-map: make-bp-map($key, $val, $font-style-map, small);
    }
    @if (str-index($key, '-md')) {
      $font-style-map: make-bp-map($key, $val, $font-style-map, medium);
    }
  }

  @include debug-map($font-style-map);

  // Heading styles
  @each $size, $headers in $font-style-map {
    //only make a media query for things above small
    @if $size != $zero-breakpoint {
      @include mq($size) {
        @include build-mapped-styles($headers, $className);
      }
    } @else {
      @include build-mapped-styles($headers, $className);
    }
  }
}
