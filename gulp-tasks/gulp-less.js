var gulp = require( 'gulp' );
var del = require( 'del' );
var path = require( 'path' );
var less = require( 'gulp-less' );
var csslint = require( 'gulp-csslint' );
var cssLintLessReporter = require( 'gulp-csslint-less-reporter' );
var sourcemaps = require( 'gulp-sourcemaps' );
var rename = require( 'gulp-rename' );
var pkg = require( '../package.json' );
var csscomb = require( 'gulp-csscomb' );
var postcss = require( 'gulp-postcss' );
var autoprefixer = require( 'autoprefixer' );
var minifyCss = require( 'gulp-cssnano' );

var PATHS = {
    SRC: path.join( __dirname, 'src' ),
    DIST: path.join( __dirname, 'dist' ),
    DOCS_SRC: path.join( __dirname, 'docs_src' ),
    DOCS_DIST: path.join( __dirname, 'docs_dist' ),
    DOCS_TEMPLATES: path.join( __dirname, 'docs_src', '_includes', 'markup-templates' ), // Docs templates directory
    LESS: path.join( __dirname, 'node_modules' ), // Less import directory
    TEST: path.join( __dirname, 'test' ), // Specified folder for test / autogenerated files
};

gulp.task( 'css', () => {

    del( [ path.join( '../docs_dist', '**/*.css' ) ] )

    const lessc = less( {
        paths: [ '../node_modules' ]
    } ).on( 'error', err => {
        console.log( 'There was a problem compiling the LESS files...' );
        throw new Error( err );
    } ); // Break on less compile errors

    const lintLessReporter = cssLintLessReporter().on( 'error', err => {
        // TODO: decide whether to throw the error
        if ( SHOULD_STOP_FOR_LINT_FAILURE ) {
            throw new Error( err );
        }
    } );

    return gulp.src( path.join( PATHS.SRC, '/less/main.less' ) )
        .pipe( sourcemaps.init() )
        .pipe( rename( {
            basename: pkg.name
        } ) ) // Rename the bundle basename to $PROJECT_NAME-$VERSION
        .pipe( lessc ) // Build the dev bundle
        .pipe( csslint() )
        .pipe( lintLessReporter )
        .pipe( csscomb() )
        .pipe( postcss( [ autoprefixer( {
            browsers: [ 'last 2 versions' ]
        } ) ] ) )
        .pipe( sourcemaps.write() )
        .pipe( gulp.dest( PATHS.DIST ) );
} );

// minify the css
gulp.task( 'css:minify', [ 'css:build' ], () =>
    gulp.src( path.join( PATHS.DIST, '/rei-cedar.css' ) )
    .pipe( rename( {
        suffix: '.min'
    } ) ) // Build the minified bundle
    .pipe( minifyCss() )
    .pipe( gulp.dest( PATHS.DIST ) )
);